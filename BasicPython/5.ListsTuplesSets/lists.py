# Список есть массив неотсортированных данных. В него можно добавить какую угодно информацию
# Основным типом массивов в питоне являются списки. Они заменяют стандартные массивы динамическими


courses = ['History', 'Math', 'Physics', 'CompSci']
nums = [1, 5, 12, 25, 69, 6, 2, 22]

print(courses[0])

# В питоне имеется возможность использовать отрицательную нумерацию индексов, чтобы
# проходить массив с конца, а не с начала.

print(courses[-1])

# При работе с массивами имеется возможность выбирать не только отдельные значения, но и
# их группы с помощью двоеточия. Область прохождения индексов выглядит следующим образом:
# [A : B); также возможны применения [:B] и [A:]

print(courses[3:])

# Существует ряд методов для работы со списками

# Метод добавляет входное значение в конец списка
courses.append('Art')

# Метод принимает на вход индекс, куда необходимо вставить новое значение, и собственно само значение
courses.insert(1, 'English')

# Для того, чтобы добавить значения из другого списка к уже
# существующему, можно использовать данный метод. В случае, если попробовать расширить список
# методами insert/append, к списку добавится новое значение в виде списка, а не содержащиеся значения

additional_courses = ['German', 'Philosophy', 'Mechanics']
courses.extend(additional_courses)
print(courses)

# Также существует метод для удаления отдельных компонентов списка
courses.remove('Math')
print(courses)

# Имеется также метод, который удаляет компонент по индексу в списке. По дефолту, метод удаляет
# последнее значение в списке, что очень удобно в случаях, когда список используется в качестве стека
# или очереди. При этом, данный метод возвращает удалённое значение
pop = courses.pop(1)
print(pop)

# Пройдёмся по методам сортировки списков

# Имеется возможность развернуть список в обратную сторону
courses.reverse()
print(courses)

# Существует отдельный метод сортировки. Слова метод располагает в алфавитном порядке,
# числа - в порядке возрастания. Метод также имеет параметр reverse, который даёт возможность
# сортировать списки в обратном порядке
courses.sort()
print(courses)

# Чтобы отсортировать исходный список, не совершая в нём изменений, можно воспользоваться функцией
nums_sorted = sorted(nums)
print(nums_sorted)

# Существуют также нескольк методов для работы с числовыми списками. При применении методов min и max
# на строчные списки будут показаны значения, соответствующие минимальному и максимальному индексам

print(min(nums))
print(max(nums))
print(sum(nums))

# Для того, чтобы найти индекс определённого значения в списке, можно использовать следующий метод
print(courses.index('Mechanics'))

# Для того, чтобы получить значение True/False о наличии компонента в списке, достаточно воспользоваться
# ключевым словом
print('Art' in courses)

# Имеется метод строк, с помощью которого можно привести список к строчному виду, где компоненты списка
# разделены определённым символом
separator = '\n'
course_str = f'{separator}'.join(courses)
print(course_str)

# Для того, чтобы разбить строку на компоненты и сформировать список, существует метод split
new_list = course_str.split(f'{separator}')
print(new_list)

