class Employee:

    raise_amount = 1.04

    num_of_employees = 0

    # Данный метод вызывается сразу при объявлении экземпляра класса
    def __init__(self, first=None, last=None, pay=None):
        self.first = first
        self.last = last
        self.pay = pay
        self.email = str(first) + '.' + str(last) + '@company.com'
        Employee.num_of_employees += 1

    def full_name(self):
        return f'{self.first} {self.last}'

    def apply_raise(self):
        self.pay = int(self.pay * self.raise_amount)

    # Представляет собой название объекта (не Employee Object №ляляля, а нормальное название),
    # Следует использовать для дебаггинга, логгинга, и предназначен, в основном, для разработчиков
    # Для класса желательно иметь хотя бы этот метод, потому что если будет вызван отсутствующий метод __str__,
    # по умолчанию будет вызван метод __repr__
    # Желательно возвращать то, что позволит впоследствии воссоздать объект,
    # то есть возвращать методом то, что написали бы во время кода в питоне (как при объявлении экземпляра
    # класса
    def __repr__(self):
        return f"Employee ('{self.first}', '{self.last}', '{self.pay}')"

    # Данный метод должен быть использован для показа данных конечному пользователю
    # При этом, этот метод является более обязательным, нежели __repr__
    def __str__(self):
        return f'{self.full_name()} - {self.email}'

    # Допустим, что при сложении наших работников мы хотим получить их суммарную зарплату
    def __add__(self, other):
        return self.pay + other.pay


emp_1 = Employee('D', 'Diamond', 60000)
emp_2 = Employee('Test', 'User', 45000)

# Можно увидеть, что вместо ссылки на объект при вызове функции print на экземпляре класса
# функция возвращает строку, которую мы указали в методе __repr__ или __str__.
print(emp_1)


# В большинстве случаев методы __init__, __repr__ и __str__ будут использоваться чаще всего
# Тем не менее, рассмотрим ещё несколько полезных методов

# В типах int и string существует метод __add__, который и проводит сложение чисел или строк
print(int.__add__(2, 2))


# Мы можем добавить данный метод в свой класс, чтобы изменить поведение сложения для нашего объекта

print(emp_1 + emp_2)





