class Employee:

    raise_amount = 1.04

    num_of_employees = 0

    def __init__(self, first=None, last=None, pay=None):
        self.first = first
        self.last = last
        self.pay = pay
        self.email = str(first) + '.' + str(last) + '@company.com'
        Employee.num_of_employees += 1

    def full_name(self):
        return f'{self.first} {self.last}'

    def apply_raise(self):
        self.pay = int(self.pay * self.raise_amount)


# Существуют переменные экземпляров класса - такие переменные содержат в себе self и могут менять своё
# значение от экземпляра к экземпляру. self в таких случаях обозначает экземпляр класса
# Существуют также переменные класса - данные переменные имеют одно и то же значение для каждого
# экземпляра данного класса

emp_1 = Employee('D', 'Diamond', 60000)
emp_2 = Employee('Test', 'User', 45000)


# Проверка наличия переменных класса происходит следующим образом: сначала экземпляр класса
# смотрит наличие данной переменной в своём поле имён. Затем, если в его namespace такого атрибута нет,
# наличие этого атрибута будет проверено у родительского класса данного экземпляра. В следующем примере
# можно увидеть, что дочерний класс не содержит в своём поле имён атрибута "raise_amount"

print(emp_1.__dict__)
print(Employee.__dict__)


# Таким образом, при изменении атрибута дочернего класса в поле имён дочернего класса будет объявлен
# данный атрибут, а ссылка на атрибут в поле имён родительского класса поменяется на ссылку в
# собственном поле имён дочернего класса.

# На данном примере мы можем увидеть, что если мы не поменяем значение атрибута 2го дочернего класса,
# то атрибут всё так же будет иметь ссылку на значение атрибута родительского класса.


Employee.raise_amount = 1.08
emp_1.raise_amount = 1.033

print(Employee.__dict__)
print(emp_1.__dict__)
print(emp_2.__dict__)

# Также существует возможность оставить данное поле неизменяемым для экземпляров данного класса
# Для этого нужно в методе apply_raise домножать зарплату не на self.raise_amount, а на
# Employee.raise_amount.
# Имеются также случаи, когда классовые переменные не должны меняться от экземпляра к экзампляру.
# Например, переменная num_of_employees должна быть одинаковой для всех экземпляров класса:

print(Employee.num_of_employees)
print(emp_1.num_of_employees)
print(emp_2.num_of_employees)

